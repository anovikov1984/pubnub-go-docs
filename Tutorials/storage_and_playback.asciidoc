== Storage & Playback Overview

[source, go]
.PUBLISH SOME MESSAGES
----
for i := 0; i < 500; i++ {
    pn.Publish().
        Message("message #" + strconv.Itoa(i)). // the payload (Required)
        Channel("history_channel"). // destination of the message (Required)
        ShouldStore(true). // store in history (defaults to account default)
        Meta(map[string]interface{}{
            "random": "value",
        }). // optional meta data object which can be used with the filtering ability
        UsePost(true). // use POST to publish, defaults to false.
        Execute()
}
----

[source, go]
.PULLING FROM STORAGE WITH A SIMPLE HISTORY() CALL
----
res, status, err := pn.History().
    Channel("history_channel").
    Count(2).
    Execute()

fmt.Println(res, status, err)
----

The response format is

[source]
----
[
    ["message1", "message2", "message3",... ],
    "Start Time Token",
    "End Time Token"
]
----

[source, go]
.PAGING
----
res, status, err := pn.History().
    Channel("history_channel").  // where to fetch history from
    Count(2). // how many items to fetch
    Execute()

fmt.Println(res, status, err)
----

[source]
----
[[498,499],14272454823679518,14272454845442942]
----

To page for the next 2, use the set the start attribute to start timetoken value, and request again with all other settings the same:

[source]
----
[[496,497],14272454791882580,14272454823679518]
----

[source, go]
.RETRIEVING FROM A TIME INTERVAL
----
res, status, err = pn.History().
    Channel("history_channel").
    Count(100).
    Start(int64(13847168620721752)). // first timestamp
    End(int64(15090358935871532)). // last timestamp
    Execute()
----

[source, go]
.INCLUDE TIMETOKEN IN HISTORY RESPONSE
----
res, status, err = pn.History().
    Channel("history_channel").
    Count(100).
    IncludeTimetoken(true). // include timetoken with each entry
    Execute()
----