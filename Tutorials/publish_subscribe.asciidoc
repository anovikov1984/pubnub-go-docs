== Publish and Subscribe Overview

[source, go]
.INITIALIZE THE API
----
import (
    pubnub "github.com/pubnub/go"
)

config := pubnub.NewConfig()
config.SubscribeKey = "my-sub-key"
config.PublishKey = "my-pub-key"
config.Secure = false

pn = pubnub.NewPubNub(config)
----

[source, go]
.PUBLISHING AND SUBSCRIBING TO A CHANNEL
----
import (
    pubnub "github.com/pubnub/go"
)

pn.Subscribe(&pubnub.SubscribeOperation{
    Channels: []string{"my-channel"}, // subscribe to channels
})
----

For `publish()`, the message attribute contains the data you are sending.

[source, go]
----
res, status, err := pn.Publish().
    Channel("my-channel").
    Message("hello there").
    ShouldStore(true).
    UsePost(true).
    Execute()

fmt.Println(res, status, err)
----

[source, go]
.PUBLISH AFTER SUBSCRIBE CONNECT
----
import (
    pubnub "github.com/pubnub/go"
)

config := pubnub.NewConfig()
config.SubscribeKey = "demo"
config.PublishKey = "demo"

pn = pubnub.NewPubNub(config)

listener := pubnub.NewListener()
done := make(chan bool)
data := make(map[string]interface{})

go func() {
    for {
        select {
        case status := <-listener.Status:
            switch status.Category {
            case pubnub.PNConnectedCategory:
                res, status, err := pn.Publish().
                    Channel("awesome-channel").
                    Message(map[string]interface{}{
                        "awesome": "data",
                        "age": 10,
                    }).
                    Execute()

                fmt.Printf(res, status, err)

                done <- true
                return
            }
        case <-listener.Message:
        case <-listener.Presence:
        }
    }
}()

pn.AddListener(listener)

pn.Subscribe(&pubnub.SubscribeOperation{
    Channels: []string{"awesome-channel"},
})

<-done
----

[source, go]
.UNSUBSCRIBING FROM A CHANNEL
----
import (
    pubnub "github.com/pubnub/go"
)

pn.Unsubscribe(&pubnub.UnsubscribeOperation{
    Channels: []string{"my-channel"},
})
----