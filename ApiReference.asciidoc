== GO V4 Configuration API Reference for Realtime Apps

=== Configuration

====== Method(s)

[source, go]
----
config := pubnub.NewConfig()
----

|===
|Properties | Type | Required | Defaults | Description

|`SubscribeKey` | string | Yes | | `SubscribeKey` from admin panel
|`PublishKey` | string | Optional | None | `PublishKey` from admin panel (only required if publishing)
|`SecretKey` | string | Optional | None | `SecretKey`  (only required for modifying/revealing access permissions)
|`CipherKey` | string | Optional | None | If `CipherKey` is passed, all communications to/from PubNub will be encrypted.
|`Uuid` | string | Optional | SDK generated uuid | `Uuid` to be used as a device identifier, a default `uuid` is generated if not passed.
|`AuthKey` | string | Optional | None | If Access Manager is utilized, client will use this `AuthKey` in all restricted requests.
|`Secure` | bool | Optional | True | Use `SSL`
|`ConnectTimeout` | int | Optional | 10 | How long to wait before giving up connection to client.
|`SubscribeRequestTimeout` | int | Optional | 310 | How long to keep the `Subscribe` loop running before disconnect.
|`NonSubscribeRequestTimeout` | int | Optional | 10 | On `Non subscribe` operations, how long to wait for server response.
|`FilterExpression` | string | Optional | None | Feature to subscribe with a custom filter expression.
|`Origin` | string | Optional | `pubsub.pubnub.com` | Custom `Origin` if needed
|`MaximumReconnectionRetries`| int | Optional | 3 |
|`PNReconnectionPolicy`| ReconnectionPolicy | Optional | None
|===

====== Basic Usage

[source, go]
----
config := pubnub.NewConfig()

// SubscribeKey from admin panel
config.SubscribeKey = "SubscribeKey" // required

// PublishKey from admin panel (only required if publishing)
config.PublishKey = "PublishKey"

// SecretKey (only required for access operations, keep away from Android)
config.SecretKey = "SecretKey"

// if CipherKey is passed, all communicatons to/from pubnub will be encrypted
config.CipherKey = "cipherKey"

// UUID to be used as a device identifier, a default UUID is generated
// if not passed
config.Uuid = "customUUID"

// if Access Manager is utilized, client will use this authKey in all restricted
// requests
config.AuthKey = "authKey"

// use SSL.
config.Secure = true

// how long to wait before giving up connection to client
config.ConnectTimeout = 100

// how long to keep the subscribe loop running before disconnect
config.SubscribeRequestTimeout = 310

// on non subscribe operations, how long to wait for server response
config.NonSubscribeRequestTimeout = 300

// PSV2 feature to subscribe with a custom filter expression
config.FilterExpression = "such=wow"

// heartbeat notifications, by default, the SDK will alert on failed heartbeats.
// other options such as all heartbeats or no heartbeats are supported.
config.SetPresenceTimeoutWithCustomInterval(120,59);
config.SetPresenceTimeout(120);
----

=== Initialization

====== Methods

[source, go]
----
import (
    pubnub "github.com/pubnub/go"
)

pn := pubnub.NewPubNub(config)
----

|====
|Parameter | Type | Required | Description

| config | Config | Yes | Goto Configuration for more details.
|====

====== Basic Usage

[source, go]
----
import (
    pubnub "github.com/pubnub/go"
)

config := pubnub.NewConfig()
config.PublishKey = "my-pub-key"
config.SubscribeKey = "my-sub-key"

pn := pubnub.NewPubNub(config)
----

====== Other examples
1. Initialize a non-secure client

[source, go]
----
import (
    pubnub "github.com/pubnub/go"
)

config := pubnub.NewConfig()
config.PublishKey = "my-pub-key"
config.SubscribeKey = "my-sub-key"
config.Secure = false

pn := pubnub.NewPubNub(config)
----

2. Initialization for a Read-Only client
(In the case where a client will only read messages and never publish to a
channel, you can simply omit the publishKey when initializing the client):

[source, go]
----
import (
    pubnub "github.com/pubnub/go"
)

config := pubnub.NewConfig()
config.SubscribeKey = "my-sub-key"

pn := pubnub.NewPubNub(config)
----

3. Specify a custom uuid (Under certain circumstances it useful to use
a custom UUID to help in identifying your users):


[source, go]
----
import (
    pubnub "github.com/pubnub/go"
)

config := pubnub.NewConfig()
config.PublishKey = "my-pub-key"
config.SubscribeKey = "my-sub-key"
config.Uuid = "my-custom-uuid"

pn := pubnub.NewPubNub(config)
----

4. Initializing with SSL Enabled (This examples
demonstrates how to enable PubNub Transport Layer
Encryption with SSL. Just initialize the client with ssl
set to true. The hard work is done, now the PubNub
API takes care of the rest. Just subscribe and publish
as usual and you are good to go):

[source, go]
.WARNING: In GO v4 SDK SSL is enabled by default, no need for this snippet
----
import (
    pubnub "github.com/pubnub/go"
)

config := pubnub.NewConfig()
config.PublishKey = "my-pub-key"
config.SubscribeKey = "my-sub-key"

pn := pubnub.NewPubNub(config)
----

5. Initializing with Access Manager (For applications
that will administer PAM permissions, the API is
initialized with the secretKey as in the following example):

[source, go]
----
import (
    pubnub "github.com/pubnub/go"
)

config := pubnub.NewConfig()
config.PublishKey = "my-pub-key"
config.SubscribeKey = "my-sub-key"
config.SecretKey = "my-secret-key"

pn := pubnub.NewPubNub(config)
----

6. Initialize with demo/demo pub/sub keys helper:

[source, go]
----
import (
    pubnub "github.com/pubnub/go"
)

pn := pubnub.NewPubNubDemo()
----

=== UUID

====== Methods

[source, go]
----
config.Uuid = string
----

|====
|Parameter|Type|Required|Default|Description

|`uuid`|string|Yes|`SDK generated uuid`| `UUID` to be used as a device identifier, a default `UUID` is generated if not passed.
|====

[source, go]
----
config.Uuid
----
This method doesn't take any arguments.

====== Basic Usage

[source, go]
.Set Uuid
----
import (
    pubnub "github.com/pubnub/go"
)

config := pubnub.NewConfig()

config.Uuid = "my-custom-uuid"
----

[source, go]
.Get Uuid
----
import (
    pubnub "github.com/pubnub/go"
)

config := pubnub.NewConfig()

config.Uuid
----

=== Authentication Key

====== Methods

[source, go]
----
config.AuthKey = string
----

|====
|Parameter|Type|Required|Description

|`AuthKey`|string|Yes|If Access Manager is utilized, client will use this `AuthKey` in all restricted requests.
|====

[source, go]
----
config.AuthKey
----

====== Basic Usage

[source, go]
.Set Auth Key
----
import (
    pubnub "github.com/pubnub/go"
)

config := pubnub.NewConfig()

config.AuthKey = "authKey"
----

[source, go]
.Get Auth Key
----
config.AuthKey
----

=== Filter Expression

[source, go]
----
config.FilterExpression = string
----

|====
|Parameter|Type|Required|Description

|`filterExpression`|string|Yes|
|====

====== Basic Usage

[source, go]
.Set Auth Key
----
import (
    pubnub "github.com/pubnub/go"
)

config := pubnub.NewConfig()

config.FilterExpression = "such=wow"
----

[source, go]
.Get Auth Key
----
config.FilterExpression
----

=== Publish

====== Methods

[source, go]
----
pn.Publish().Channel(string).Message(interface{}).ShouldStore(bool).Meta(interface{}).UsePost(bool).DoNotReplicate(bool).Execute()
----

|====
|Parameter|Type|Required|Default|Description
|Message|interface{}|Yes||The payload
|Channel|string|Yes||Destination of `Message`
|ShouldStore|bool|Optional| `account default` | Store in history
|UsePost|bool|Optional| `false` | Use POST to `Publish`
|Meta|interface{}|Optional| `null` | Meta data object which can be used with the filtering ability
|DoNotReplicate|bool|Optional|`false`|
|====

====== Basic Usage

[source, go]
----
res, status, err := pn.Publish().
    Channel("my-channel").
    Message([]string{"Hello", "there"}).
    UsePost(true).
    Execute()

fmt.Println(res, status, err)
----

====== Response

|====
| Method | Type | Description
| Timestamp | int | an `int` representation of the time token when the message was published
|====

====== Other Examples
Publish with metadata

[source, go]
----
res, status, err := pn.Publish().
    Channel("my-channel").
    Message([]string{"Hello", "there"}).
    Meta(map[string]interface{}{
        "name": "Alex",
    })
    Execute()
----

Publish array

[source, go]
----
res, status, err := pn.Publish().
    Channel("my-channel").
    Message([]string{"Hello", "there"}).
    Meta([]string{"1a", "2b", "3c"})
    Execute()
----

Store the published message for 10 hours

[source, go]
----
res, status, err := pn.Publish().
    Channel("my-channel").
    Message("test").
    ShouldStore(true).
    Execute()
----

=== Subscribe

[source, go]
----
pn.Subscribe(&pubnub.SubscribeOperation{Channels: []string, ChannelGroups: []string, Timetoken: int64, PresenceEnabled: bool})
----

|====
| Parameter | Type | Required| Description
| Channels | []string | Optional | Subscribe to `channels`, Either `channel` or `channel_group` is required.
| ChannelGroups | []string | Optional | Subscribe to `channel_groups`, Either `channel` or `channel_group` is required.
| Timetoken | int64 | Optional | Pass a `timetoken`.
| PresenceEnabled | bool | Optional | Also subscribe to related presence information.
|====

====== Basic Usage

[source, go]
----
import (
    pubnub "github.com/pubnub/go"
)

pn.Subscribe(&pubnub.SubscribeOperation{
    Channels: []string{"my-channel"}, // subscribe to channels
})
----

====== Response

PNMessage
|====
| Method | Type | Description
| Message | interface{} | The message sent on `channel`.
| Channel | string | The `channel` on which the message was received.
| Subscription | string | The `channel group` or wildcard subscription match (if exists).
| Timetoken | int64 | Timetoken for the `message`.
| UserMetadata | interface{} | User `metadata`.
|====

PNPresence
|====
| Method | Type | Description
| Event | string | Events like `join`, `leave`, `timeout`, `state-change`.
| Uuid | string | `Uuid` for event.
| Timestamp | int64 | `Timestamp` for event.
| Occupancy | int | Current `occupancy`.
| Subscription | string | Message has been received on `Channel`.
| Timetoken | int64 | `Timetoken` of the `message`.
| State | interface{} | `State` of the UUID.
| UserMetadata | map[string]interface{} | User `metadata`.
|====

====== Other Examples
1. Basic subscribe

[source, go]
----
import (
    pubnub "github.com/pubnub/go"
)

config := pubnub.NewConfig()
// publishKey from admin panel (only required if publishing)
config.PublishKey = "demo" // required
// subscribeKey from admin panel
config.SubscribeKey = "demo"

pn := pubnub.NewPubNub(config)

pn.Subscribe(&pubnub.SubscribeOperation{
    Channels: []string{"my-channel"},
})
----

2. Subscribing to more than one channel (It is possible to subscribe
to more than one channel over a single TCP socket by taking
advantage of Multiplexing feature. See the Multiplexing section for
more info on this feature as well as the examples below using a array
or an array to specify channel name):

[source, go]
----
pn.Subscribe(&pubnub.SubscribeOperation{
    Channels: []string{"my-channel1", "my-channel2"},
})
----

3. Subscribing to a Presence channel (For any given channel there is an
associated Presence channel. You can subscribe directly to the
channel by appending -pnpres to the channel name. For example
the channel named my_channel would have the presence channel named my_channel-pnpres):

[source, go]
----
pn.Subscribe(&pubnub.SubscribeOperation{
    Channels: []string{"my-channel"},
    PresenceEnabled: true,
})
----

=== Sample Responses
[source, go]
.JOIN EVENT
----
if presence.Event == "join" {
    presence.Uuid // 175c2c67-b2a9-470d-8f4b-1db94f90e39e
    presence.Timestamp // 1345546797
    presence.Occupancy // 2
}
----

[source, go]
.LEAVE EVENT
----
if presence.Event == "leave" {
    presence.Uuid // 175c2c67-b2a9-470d-8f4b-1db94f90e39e
    presence.Timestamp // 1345546797
    presence.Occupancy // 2
}
----

[source, go]
.TIMEOUT EVENT
----
if presence.Event == "timeout" {
    presence.Uuid // 175c2c67-b2a9-470d-8f4b-1db94f90e39e
    presence.Timestamp // 1345546797
    presence.Occupancy // 2
}
----

[source, go]
.INTERVAL EVENT
----
if presence.Event == "interval" {
    presence.Uuid // 175c2c67-b2a9-470d-8f4b-1db94f90e39e
    presence.Timestamp // 1345546797
    presence.Occupancy // 2
}
----

[source, go]
----
.CUSTOM PRESENCE EVENT
if presence.Event == "state-change" {
    presence.Timestamp
    presence.Occupancy
}
----

For example, this interval message indicates there were 2 new UUIDs that joined and 1 timed out UUID since the last interval:

[source, go]
----
if presence.Event == "interval" {
    presence.Occupancy // # users in channel
    presence.Join // [uuid1 uuid2]
    presence.Timestamp // unix timestamp
}
----

4. Wildcard subscribe to channels (Wildcard subscribes allow the client
to subscribe to multiple channels using wildcard. E.g., if you
subscribe to a.* you will get all messages for a.b, a.c, a.x. The
wildcarded * portion refers to any portion of the channel string name
after the dot (.)):

[source, go]
----
pn.Subscribe(&pubnub.SubscribeOperation{
    Channels: []string{"foo.*"}, // subscribe to channels information
})
----

5. Subscribing with state:

[source, go]
----
import (
	pubnub "github.com/pubnub/go"
)

config := pubnub.NewConfig()
config.PublishKey = "demo"
config.SubscribeKey = "demo"

pn := pubnub.NewPubNub(config)

state := map[string]interface{}{
    "field_a": "me",
    "field_b": 21,
}

listener := pubnub.NewListener()

go func() {
    for {
        select {
        case status := <-listener.Status:
            switch status.Category {
            case pubnub.PNConnectedCategory:
                res, status, err := pn.SetState().
                    State(state).
                    Channels([]string{"my-channel"}).
                    Execute()

                fmt.Println(res, status, err)
            }
        case <-listener.Message:
        case <-listener.Presence:
        }
    }
}()

pn.AddListener(listener)

pn.Subscribe(&pubnub.SubscribeOperation{
    Channels: []string{"my-channel"},
})
----

6. Subscribe to a channel group:

[source, go]
----
pn.Subscribe(&pubnub.SubscribeOperation{
    Channels: []string{"ch1", "ch2"}, // subscribe to channels
    ChannelGroups: []string{"cg1", "cg2"}, // subscribe to channel groups
    Timetoken: int64(1337), // optional, pass a timetoken
    PresenceEnabled: true, // also subscribe to related presence information
})
----

7. Subscribe to a presence channel of a channel group:

[source, go]
----
pn.Subscribe(&pubnub.SubscribeOperation{
    ChannelGroups: []string{"cg1", "cg2"}, // subscribe to channel groups
    Timetoken: int64(1337), // optional, pass a timetoken
    PresenceEnabled: true, // also subscribe to related presence information
})
----

=== Unsubscribe

====== Methods

[source, go]
----
pn.Unsubscribe(&pubnub.UnsubscribeOperation{
    Channels: []string,
    ChannelGroups: []string,
})
----

|===
| Parameter | Type | Required | Defaults | Description
| Channels | []string | Optional | False | Unsubscribe to channels, Either channel or channelGroup is required
| ChannelGroups | []string | Optional | false | Unsubscribe to channel groups, Either channel or channelGroup is required
|===

====== BASIC USAGE

[source, go]
----
pn.Unsubscribe(&pubnub.UnsubscribeOperation{
    Channels: []string{"my-channel"},
})
----

====== REST RESPONSE FROM SERVER

[source, go]
----
if presence.Event == "leave" {
    presence.Uuid // left-uuid
    presence.Timestamp // 1345546797
    presence.Occupancy // 2
}
----

1.Unsubscribing from multiple channels.

[source, go]
----
pn.Unsubscribe(&pubnub.UnsubscribeOperation{
    Channels: []string{"my-channel", "my-channel2"},
})
----

Example Response:

[source, go]
----
if presence.Event == "leave" {
    presence.Uuid // left-uuid
    presence.Timestamp // 1345546797
    presence.Occupancy // 2
}
----

2. Unsubscribe from a channel group

[source, go]
----
import (
    pubnub "github.com/pubnub/go"
)

pn.Unsubscribe(&pubnub.UnsubscribeOperation{
    ChannelGroups: []string{"my-cg1", "my-cg2"},
})
----

Example Response:

[source, go]
----
if presence.Event == "leave" {
    presence.Uuid // left-uuid
    presence.Timestamp // 1345546797
    presence.Occupancy // 2
}
----

=== Unsubscribe All

====== BASIC USAGE

[source, go]
----
pn.UnsubscribeAll()
----

=== Listeners

[source, go]
.ADDING LISTENERS
----
listener := pubnub.NewListener()

 go func() {
    for {
        select {
        case status := <-listener.Status:
            switch status.Category {
            case pubnub.PNDisconnectedCategory:
                // this is the expected category for an unsubscribe. This means there
                // was no error in unsubscribing from everything
            case pubnub.PNConnectedCategory:
                // this is expected for a subscribe, this means there is no error or issue whatsoever
            case pubnub.PNReconnectedCategory:
                // this usually occurs if subscribe temporarily fails but reconnects. This means
                // there was an error but there is no longer any issue
            case pubnub.PNAccessDeniedCategory:
                // this means that PAM does allow this client to subscribe to this
                // channel and channel group configuration. This is another explicit error
            }
        case <-listener.Message:
        case <-listener.Presence:
        }
    }
}()
----

[source, go]
.REMOVING LISTENERS
----
listener := pubnub.NewListener()

pn.AddListener(listener)

// some time later
pn.RemoveListener(listener)
----

[source, go]
.HANDLING DISCONNECT
----
import (
    pubnub "github.com/pubnub/go"
)

 go func() {
    for {
        select {
        case status := <-listener.Status:
            switch status.Category {
            case pubnub.PNDisconnectedCategory:
                // handle disconnect here
            }
        case <-listener.Message:
        case <-listener.Presence:
        }
    }
}()
----

LISTENER CATEGORIES
|====
| Categories | Description
| PNReconnectedCategory | SDK was able to reconnect to pubnub.
| PNConnectedCategory | SDK subscribed with a new mix of channels (fired every time the `channel` / `channel group` mix changed).
| PNAcknowledgmentCategory | Used API report success with this status category.
| PNAccessDeniedCategory | Request failed because of access error (active PAM). `status.errorData.channels` or `status.errorData.channelGroups` contain list of channels and/or groups to which user with specified auth key doesn't have access.
| PNTimeoutCategory | Used API didn't received response from server in time.
| PNDisconnectedCategory | Client did unsubscribe from specified real-time data channels.
| PNBadRequestCategory | Request can't be completed because not all required values has been passed or passed values has unexpected data type.
| PNCancelledCategory |
| PNUnknownCategory |
|====

== Presence

=== Here Now

====== Methods

[source, go]
----
pn.HereNow().Channels([]string).ChannelGroups([]string).IncludeState(bool).IncludeUuids(bool).Execute()
----

|===
| Parameter | Type | Required | Defaults | Description
| Channels | []string | Optional | | The `Channels` to get the here now details.
| ChannelGroups | []string | Optional | | The `Channel groups` to get the here now details.
| IncludeState | bool | Optional | False | If `true`, the response will include the presence states of the users for `channels`/`channelGroups`.
| IncludeUuids | bool | Optional | True | If `true`, the response will include the `UUIDs` of the connected clients.
|===

====== Basic Usage

[source, go]
----
res, status, err := pn.HereNow().
    Channels([]string{"my-channel-1"}).
    IncludeUuids(true).
    Execute()

for _, v := range res.Channels {
    fmt.Println("---")
    fmt.Println("Channel: ", v.ChannelName)
    fmt.Println("Occupancy: ", v.Occupancy)
    fmt.Println("Occupants")

    for _, v := range v.Occupants {
        fmt.Println("Uuid: ", v.Uuid, ", state: ", v.State)
    }
}
fmt.Println(status, err)
----

The `here_now()` operation returns a `PNHereNowResult` which contains the following fields:
|===
| Method | Type | Description
| TotalChannels | int | Total `Channels`
| TotalOccupancy | int | Total `Occupancy`
| Channels | []HereNowChannelData | Please see HereNowChannelData for more details
|===

HereNowChannelData
|===
| Method | Type | Description
| ChannelName | string | `Channel` name
| Occupancy | int | `Occupancy` of the `Channel`
| Occupants | []HereNowOccupantsData | Please see HereNowOccupantsData for more details
|===

HereNowOccupantsData
|===
| Method | Type | Description
| Uuid | string | `Uuid` of the user
| State | map[string]interface{} | `State` of the user.
|===

====== Other Examples

1. Returning State:
[source, go]
----
res, status, err := pn.HereNow().
    Channels([]string{"my-channel-1"}). // who is present on those channels?
    IncludeUuids(true). // if false, only shows occupancy count
    IncludeState(true). // include state with request (false by default)
    Execute()
----

Example Response
[source, go]
----
for _, v := range res.Channels {
    fmt.Println(v.ChannelName) // my_channel
    fmt.Println(v.Occupancy) // 3
    fmt.Println(v.Occupants) // members of a channel

    for _, v := range v.Occupants {
        fmt.Println(v.Uuid) // some_uuid;
        fmt.Println(v.State) // channel member state, if applicable
    }
}
----

2. Return Occupancy Only:
[source, go]
----
res, status, err := pn.HereNow().
    Channels([]string{"my-channel-1"}). // who is present on those channels?
    IncludeUuids(false). // if false, only shows occupancy count
    IncludeState(false). // include state with request (false by default)
    Execute()
----

Example Response
[source, go]
----
for _, v := range res.Channels {
    fmt.Println(v.ChannelName) // my_channel
    fmt.Println(v.Occupancy) // 3
}
----

3. Returning uuids and occupancy for all channels:
[source, go]
----
res, status, err := pn.HereNow().
    IncludeUuids(true). // if false, only shows occupancy count
    IncludeState(false). // include state with request (false by default)
    Execute()
----

Example Response
[source, go]
----
res.TotalChannels // 4
res.TotalOccupancy // 12

for _, v := range res.Channels {
    fmt.Println(v.ChannelName) // my_channel
    fmt.Println(v.Occupancy) // 3
    fmt.Println(v.Occupants) // members of a channel

    for _, v := range v.Occupants {
        fmt.Println(v.Uuid) // some_uuid;
    }
}
----

4. Return Occupancy for all channels:
[source, go]
----
res, status, err := pn.HereNow().
    IncludeUuids(true). // if false, only shows occupancy count
    IncludeState(true). // include state with request (false by default)
    Execute()
----

Example Response
[source, go]
----
res.TotalChannels // 4
res.TotalOccupancy // 12

for _, v := range res.Channels {
    fmt.Println(v.Occupancy) // 3
    fmt.Println(v.Occupants) // members of a channel

    for _, v := range v.Occupants {
        fmt.Println(v.Uuid) // some_uuid;
    }
}
----

5. Here Now for Channel Groups:
[source, go]
----
res, status, err := pn.HereNow().
    ChannelGroups([]string{"cg1", "cg2", "cg3"}). // who is present on channel groups?
    IncludeUuids(true). // if false, only shows occupancy count
    IncludeState(true). // include state with request (false by default)
    Execute()
----

Example Response
[source, go]
----
res.TotalOccupancy // 12
----

=== Where Now

====== Methods

[source, go]
----
pn.WhereNow().Uuid(string).Execute()
----

|===
| Parameter | Type | Required | Description
| Uuid | string | Optional | `uuid` to get info on
|===

====== Basic Usage

[source, go]
----
res, status, err := pn.WhereNow().
    Uuid("some-person").
    Execute()
----

====== Response

|===
| Parameter | Type | Description
| Channels | []string | The list of `channels` where the `UUID` is present.
|===

====== Other Examples

[source, go]
----
res, status, err := pn.WhereNow().
    Uuid("username-uuid"). // uuid of the user we want to spy on
    Execute()
----

=== User State

====== Methods

[source, go]
----
pn.SetState().Channels([]string).ChannelGroups([]string).State(map[string]interface{}).Uuid(string).Execute()
----

|===
| Parameter | Type | Required | Description

| Channels | []string | Optional | `channels` to set `state`
| ChannelGroups | []string | Optional | `channel groups` to set `state`
| State | map[string]interface{} | Optional | `state` to set
| Uuid | string | Optional | Set state for specific UUID.
|===

[source, go]
----
pn.GetState().Channels([]string).ChannelGroups([]string).Uuid(string).Execute()
----

|===
| Parameter | Type | Required | Description

| Channels | []string | Optional | `channels` to get `state`.
| ChannelGroups | []string | Optional | `channel groups` to get `state`.
| Uuid | string | Optional | `uuid`.
|===

====== Basic Usage

Set State:

[source, go]
----
res, status, err := pn.SetState().
    Channels([]string{"ch"}).
    State(map[string]interface{}{
        "is_typing": true,
    }).
    Execute()

fmt.Println(res, status, err)
----

Get State:

[source, go]
----
res, status, err := pn.GetState().
    Channels([]string{"ch1", "ch2", "ch3"}).
    ChannelGroups([]string{"cg1", "cg2", "cg3"}).
    Uuid("suchUUID").
    Execute()

fmt.Println(res, status, err)
----

====== Response

Set State

|===
| Method | Type | Description

| State | interface{} | Map of `UUIDs` and the user states.
|===

Get State

|===
| Method | Type | Description

| State | map[string]interface{} | Map of `Uuids` and the user states.
|===

====== Other Examples

[source, go]
.Set state for channels in a `channel group`:
----
myState := map[string]interface{}{
    "age": 20,
}

pn.SetState().
    ChannelGroups([]string{"cg1", "cg2", "cg3"}).
    Channels([]string{"ch1", "ch2", "ch3"}).
    State(myState).
    Execute()
----

[source, go]
----
if presence.Event == "state-change" {
    presence.State
}
----

=== Grant

====== Methods

[source, go]
----
pn.Grant().Channels([]string).Groups([]string).AuthKeys([]string).Read(bool).Write(bool).Manage(bool).Ttl(int).Execute()
----

|===
| Parameter | Type | Required | Defaults | Description

| AuthKeys | []string | Optional | | `auth keys`.
| Channels | []string | Optional | | `channels` to grant access.
| Groups | []string | Optional | | `channel groups` to grant access.
| Read | bool| Optional | False | `read` permissions.
| Write | bool| Optional | False | `write` permissions.
| Manage | bool| Optional | False | `manage` permissions.
| Ttl | int | Optional | None | `time to live` for permissions to be valid.
|===

====== Basic Usage

[source, go]
----
res, status, err := pn.Grant().
    Channels([]string{"ch1", "ch2", "ch3"}). // channels to allow grant on
    Groups([]string{"cg1", "cg2", "cg3"}). // groups to allow grant on
    AuthKeys([]string{"my-key"}). // the keys we are provisioning
    Read(true). // allow those keys to write (false by default)
    Write(true). // allow those keys to manage channel groups (false by default)
    Manage(true). // allow keys to read the subscribe feed (false by default)
    Ttl(123). // how long those keys will remain valid (0 for eternity)
    Execute()

fmt.Println(res, status, err)
----

====== Response
|===
| Method | Type | Description

| Level | string | Permissions level, one of `subkey`, `subkey+auth`, `channel`, `channel-group`,
 `channel-group+auth` level
| Ttl | int | `ttl` of grant.
| SubscribeKey | string | The `subscribe key`.
| Channels | []string | Access rights per channel. See `PNAccessManagerChannelData` for more details.
| ReadEnabled | bool | subkey level `read` permissions.
| WriteEnabled | bool | subkey level `write` permissions.
| ManageEnabled | bool | subkey level `manage` permissions.
|===

PNPAMEntityData
|===
| Method | Type | Description

| AuthKeys | []string | Access rights per auth-key. See `PNAccessManagerKeyData` for more details.
| Name | string | Channel or group `name`.
| ReadEnabled | bool | Channel or group level `read` permissions.
| WriteEnabled | bool | Channel or group level `write` permissions.
| ManageEnabled | bool | Channel or group level `manage` permissions.
| Ttl | int | Time to live value.
|===

PNAccessManagerKeyData
|===
| Method | Type | Description

| ReadEnabled | bool | auth-key read permissions.
| WriteEnabled | bool | auth-key read permissions.
| ManageEnabled | bool | auth-key read permissions.
| Ttl | int | Time to live value.
|===

`read`, `write` and `manage` permissions has 3 states:

. `true` if `enabled`
. `false` if `disabled`
. `None` if `not explicitly set`

====== Other Examples

[source, go]
.1. Grant subscribe privileges to all users on all `channel(s)` with default ttl (`1440` minutes):
----
res, status, err := pn.Grant().
    Read(true).
    Write(true).
    Execute()

fmt.Println(res, status, err)
----

[source, go]
.2. Allow subscribe and publish to a specific grant subscribe and publish to a specific `channel` for all users (no auth_key required) with default ttl (`1440` minutes):
----
res, status, err := pn.Grant().
    Channels([]string{"my_channel"}).
    Read(true).
    Write(true).
    Execute()

fmt.Println(res, status, err)
----

[source, go]
.3. Grant subscribe access to a channel only for clients with a specific auth_key with a 5 minute ttl:
----
res, status, err := pn.Grant().
    Channels([]string{"my_channel"}).
    Read(false).
    Write(true).
    AuthKeys([]string{"my_authkeys"}).
    Ttl(5).
    Execute()

fmt.Println(res, status, err)
----

[source, go]
.4. Allow access to a specific channel for presence:
----
res, status, err := pn.Grant().
    Channels([]string{"my_channel"}).
    Read(false).
    Write(true).
    Execute()

fmt.Println(res, status, err)
----

[source, go]
.5. Grant PAM Permissions for channel group:
----
res, status, err := pn.Grant().
    Channels([]string{"ch1", "ch2", "ch3"}).
    Groups([]string{"cg1", "cg2", "cg3"}).
    AuthKeys([]string{"my-key"}).
    Read(true).
    Write(true).
    Manage(true).
    Ttl(123).
    Execute()

fmt.Println(res, status, err)
----

[source, go]
.6. Application level Grant
----
res, status, err := pn.Grant().
    Read(true).
    Write(true).
    Execute()

fmt.Println(res, status, err)
----

[source, go]
.7. Channel level
----
res, status, err := pn.Grant().
    Channels([]string{"my_channel"}).
    Read(true).
    Write(true).
    Execute()

fmt.Println(res, status, err)
----

[source, go]
.8. User level
----
res, status, err := pn.Grant().
    Channels([]string{"my_channel"}).
    AuthKeys([]string{"my_key"}).
    Read(true).
    Write(true).
    Ttl(5).
    Execute()

fmt.Println(res, status, err)
----

=== Adding Channels to Channel Group

====== Methods

[source, go]
----
pn.AddChannelToChannelGroup().Channels([]string).Group(string).Execute()
----

|===
| Parameter | Type | Required | Description

| Channels | []string | Yes | `channels` to add to the `channel group`.
| Group | string  | Yes | The `channel group` to add the `channels` to.
|===

====== Basic usage

[source, go]
----
pn.AddChannelToChannelGroup().
    Channels([]string{"ch1", "ch2"}).
    Group("cg").
    Execute()
----

====== REST RESPONSE FROM SERVER

[source, json]
----
{
    "service" : "channel-registry",
    "status"  : 200,
    "error"   : false,
    "message" : "OK"
}
----

=== Listing Channels in Channels Group

====== Methods

[source, go]
----
pn.ListChannelsInChannelGroup().ChannelGroup(string).Execute()
----

|===
| Parameter | Type | Required | Description

| ChannelGroup | string | Yes | The `channel group` to fetch `channels`.
|===

====== Basic usage

[source, go]
.Listing channels:
----
pn.ListChannelsInChannelGroup().
    ChannelGroup("cg").
    Execute()
----

====== RESPONSE

|===
| Method | Type | Description

| Channels | []string | List of `channels` of a `channel group`.
| Group | string | List `channel group`.
|===

=== Removing Channels from Channels Group

====== Methods

[source, go]
----
pn.RemoveChannelFromChannelGroup().Group(string).Channels([]string).Execute()
----

|===
| Parameter | Type | Required | Description

| Channels | []string | Yes | `channels` remove from the channel group.
| ChannelGroup | string | Yes | The `channel group` to remove the `channels` from.
|===

====== Basic usage

[source, go]
----
pn.RemoveChannelFromChannelGroup().Group("cg").Channels([]string{"ch1", "ch2"}).Execute()
----

====== REST RESPONSE FROM SERVER

[source, json]
----
{
    "service" : "channel-registry",
    "status"  : 200,
    "error"   : false,
    "message" : "OK"
}
----

=== Deleting Channel Group

[source, go]
----
pn.DeleteChannelGroup().ChannelGroup(string).Execute()
----

|===
| Parameter | Type | Required | Description

| ChannelGroup | string | Yes | The `channel group` to remove.
|===

====== Basic Usage

[source, go]
----
pn.DeleteChannelGroup().
    ChannelGroup("remove-cg").
    Execute()
----

====== REST RESPONSE FROM SERVER

[source, json]
----
{
    "service" : "channel-registry",
    "status"  : 200,
    "error"   : false,
    "message" : "OK"
}
----

=== History

====== Methods

[source, go]
----
pn.History().Channel(string).Reverse(bool).IncludeTimetoken(bool).Start(int64).End(int64).Count(int).Execute()
----

|===
| Parameter | type | Required | Defaults | Description

| Channel | string | True | | Specifies `channel` to return history messages from.
| Reverse | bool | Optional| false | Setting to true will traverse the time line in reverse starting with the oldest message first.
| IncludeTimetoken | bool| Optional| false | Whether event dates time tokens should be included in response or not.
| Start | int64 | Optional| | Time token delimiting the start of time slice (exclusive) to pull messages from.
| End | int64 | Optional| | Time token delimiting the end of time slice (inclusive) to pull messages from.
| Count | int | Optional| | Specifies the number of historical messages to return.
|===

====== Basic Usage

[source, go]
----
res, status, err := pn.History().
    Channel("my-ch"). // where to fetch history from
    Count(100). // how many items to fetch
    Execute()

fmt.Println(res, status, err)
----

====== Response

|===
| Method | Type | Description

| Messages | []HistoryResponseItem | array of messages of type PNHistoryItemResult. See PNHistoryItemResult for more details.
| StartTimetoken | int64 | Start timetoken.
| EndTimetoken | int64 | End timetoken
|===

HistoryResponseItem
|===
| Method | Type | Description

| Timetoken | int64 | `Timetoken` of the message.
| Entry | interface{} | Message
|===

====== Other Examples

[source, go]
.1. Use history() to retrieve the three oldest messages by retrieving from the time line in reverse:
----
res, status, err := pn.History().
    Channel("my-ch"). // where to fetch history from
    Count(3). // how many items to fetch
    Reverse(true). // should go in reverse?
    Execute()
----

Response
[source, go]
----
for _, v := range res.Messages {
    fmt.Println(v.Entry) // custom JSON structure for message
}
----

[source, go]
.2. Use history() to retrieve messages newer than a given time token by paging from oldest message to newest message starting at a single point in time (exclusive):
----
res, status, err := pn.History().
    Channel("my-ch"). // where to fetch history from
    Start(int64(13847168620721752)). // first timestamp
    Reverse(true). // should go in reverse?
    Execute()
----

Response
[source, go]
----
for _, v := range res.Messages {
    fmt.Println(v.Entry) // custom JSON structure for message
}
----

[source, go]
.3. Use history() to retrieve messages until a given time token by paging from newest message to oldest message until a specific end point in time (inclusive):
----
res, status, err := pn.History().
    Channel("my-ch"). // where to fetch history from
    Count(100).
    Start(int64(-1)). // first timestamp
    End(int64(13847168819178600)). // last timestamp
    Reverse(true). // should go in reverse?
    Execute()
----

Response
[source, go]
----
for _, v := range res.Messages {
    fmt.Println(v.Entry) // custom JSON structure for message
}
----

[source, go]
.4. Paging History Responses:
----
func getAllMessages(startTT int64) {
	res, _, _ := pn.History().
		Channel("history_channel").
		Count(2).
		Execute()

	msgs := res.Messages
	start := res.StartTimetoken
	end := res.EndTimetoken

	if len(msgs) > 0 {
		fmt.Println(len(msgs))
		fmt.Println("start " + strconv.Itoa(int(start)))
		fmt.Println("end " + strconv.Itoa(int(end)))
	}

	if len(msgs) == 100 {
		getAllMessages(start)
	}
}

getAllMessages(int64(14759343456292767))
----

[source, go]
.5. Paging History Responses:
----
res, status, status := pn.History().
    Channel("history_channel").
    Count(100).
    IncludeTimetoken(true).
    Execute()

fmt.Println(res, status, err)
----

=== Time

====== Methods

[source, go]
----
pn.Time().Execute()
----

====== Basic Usage

[source, go]
----
res, status, err := pn.Time().Execute()

fmt.Println(res, status, err)
----

====== Response

|===
| Method | type | Description

| Timetoken | int64 | Returns a `date` representation of current time token.
|===
